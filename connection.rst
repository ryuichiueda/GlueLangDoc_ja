==========================================
コマンドの接続
==========================================

パイプライン
==========================================

　パイプの記号は ``>>=`` です。
``|`` と比較すると打つのが面倒ですが、
一方でスクリプトの中で目立つので、
よく見落とされる ``|`` よりは分かりやすいだろうという意図です。
また、厳密な裏付けはありませんが、Haskellの ``>>=`` と
パイプの挙動は似ているので、この記号を使用しています。

　パイプは次のように使います。

.. code-block:: bash
        
        /usr/bin/seq '1' '5' >>= /usr/bin/tac
        #Macの場合: /usr/bin/seq '1' '5' >>= /usr/bin/tail '-r'

出力は、bashで ``seq 1 5 | tac`` したときと同じです。
上のスクリプトを ``pipeline.glue`` というファイルに保存して実行すると次のような出力が得られます。

.. code-block:: bash

	$ glue pipeline.glue 
	5
	4
	3
	2
	1


　また、次のように改行することもできます。

.. code-block:: bash

	/usr/bin/seq '1' '5'
	>>= /usr/bin/tail -r
	
        #これでもOK
	/usr/bin/seq '1' '5' >>=
	/usr/bin/tail -r


AND記号
==========================================

　Bシェル系の ``&&`` に相当する記号は ``>>`` です。
これもHaskellに由来します。次のように使います。

.. code-block:: bash

        /bin/echo 'a' >> /bin/echo 'b' >> /bin/echo 'c'

このコードを ``and.glue`` というファイルに保存して実行した時の出力を示します。

.. code-block:: bash

        a
        b
        c
